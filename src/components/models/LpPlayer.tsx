/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 C:\Users\parallel\Downloads\room\player.glb -t -s -i -T -S 
Files: C:\Users\parallel\Downloads\room\player.glb [2.28MB] > C:\Users\parallel\player-transformed.glb [223.81KB] (90%)
*/

import { useGLTF } from "@react-three/drei";
import { useEffect, useRef } from "react";
import { BoxGeometry, Group, MeshBasicMaterial } from "three";
import { GLTF } from "three-stdlib";

import useSceneStore from "@/states/sceneStore";

type GLTFResult = GLTF & {
    nodes: {
        Mesh018: THREE.Mesh;
        Mesh018_1: THREE.Mesh;
        Mesh018_2: THREE.Mesh;
        Mesh018_3: THREE.Mesh;
        Mesh018_4: THREE.Mesh;
        Mesh018_5: THREE.Mesh;
        Mesh018_6: THREE.Mesh;
        Mesh018_7: THREE.Mesh;
    };
    materials: {
        PaletteMaterial002: THREE.MeshStandardMaterial;
        ["Dark.Wood.004"]: THREE.MeshStandardMaterial;
        PaletteMaterial005: THREE.MeshStandardMaterial;
        PaletteMaterial006: THREE.MeshStandardMaterial;
        PaletteMaterial007: THREE.MeshStandardMaterial;
        PaletteMaterial001: THREE.MeshStandardMaterial;
        PaletteMaterial003: THREE.MeshStandardMaterial;
        PaletteMaterial004: THREE.MeshStandardMaterial;
    };
};

export const LpPlayer = (props: JSX.IntrinsicElements["group"]) => {
    const { nodes, materials } = useGLTF(
        "/player-transformed.glb"
    ) as GLTFResult;

    const lpRef = useRef<Group>(null);
    const stationRef = useRef<Group>(null);
    const { setLpPlayer, setStation } = useSceneStore();

    useEffect(() => {
        if (lpRef.current && stationRef.current) {
            setLpPlayer(lpRef.current);
            setStation(stationRef.current);
        }

        return () => {
            setLpPlayer(null);
            setStation(null);
        };
    }, [setLpPlayer, setStation]);

    return (
        <group
            name="lpPlayerOBJ"
            ref={lpRef}
            {...props}
            dispose={null}
            position={[-0.025, 0.665, 0]}
            rotation={[0, Math.PI / 2, 0]}
        >
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh018.geometry}
                material={materials.PaletteMaterial002}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh018_1.geometry}
                material={materials["Dark.Wood.004"]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh018_2.geometry}
                material={materials.PaletteMaterial005}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh018_3.geometry}
                material={materials.PaletteMaterial006}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh018_4.geometry}
                material={materials.PaletteMaterial007}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh018_5.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh018_6.geometry}
                material={materials.PaletteMaterial003}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh018_7.geometry}
                material={materials.PaletteMaterial004}
            />
            <group
                ref={stationRef}
                scale={0.5}
                position={[0.03, 3, 0.75]}
                rotation={[0, 0, 0]}
            ></group>
        </group>
    );
};

useGLTF.preload("/lpPlayer-transformed.glb");
